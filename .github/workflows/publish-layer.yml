name: Publish Lambda Layer Version

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-region:
        required: true
        type: string

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  publish-lambda-layer-version:
    name: Publish Lambda Layer Version
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Check if requirements.txt was changed
        id: check_changes
        run: |
          git fetch origin ${{ github.event.before }}  # Fetch the previous commit
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'requirements.txt'; then
            echo "requirements.txt has been updated!"
            echo "changed=true" >> $GITHUB_ENV
          else
            echo "requirements.txt has not been updated."
            echo "changed=false" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.GH_RUNNER_PY_VER }}

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
          aws-region: ${{ inputs.aws-region }}
          role-session-name: enverus-session
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Build lambda layer
        if: env.changed == 'true'
        run: |
          echo "Running commands because requirements.txt has been updated!"
          # Add your commands here, e.g., install dependencies, run tests, etc.
          # Enable manyLinux
          echo "#### Enable manyLinux ####"
          python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" || true
          PY_VER=$(echo "$(python --version)" | awk '{print $2}' | awk -F '.' '{print $1"."$2}') && echo $PY_VER || true
          echo 'manylinux1_compatible = True' > ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
          cat ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
          python -c 'import sys; sys.path.append(r"/_manylinux.py")' || true
          
          echo "#### Build Lambda Layer ####"
          # cd ${{ inputs.data-pipeline }}/module
          mkdir -p ./lambda-layer/python
          pip install -r ./lambda-layer/requirements.txt --platform=manylinux2014_x86_64 --only-binary=:all: -t ./lambda-layer/python
          cd ./lambda-layer
          zip -r ../lambda-layer.zip ./python
          cd ../
          aws sts get-caller-identity
          response=$(aws lambda publish-layer-version \
                        --layer-name python-libs \
                        --description "Llandman Lambda Layer for shared py libraries" \
                        --zip-file fileb://lambda-layer.zip \
                        --compatible-runtimes "python${{ vars.GH_RUNNER_PY_VER }}" \
                        --license-info "MIT")
          lambda_layer_version_arn=$(echo $response | jq -r '.LayerVersionArn')
          echo $lambda_layer_version_arn
