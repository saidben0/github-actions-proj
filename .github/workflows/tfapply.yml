name: Terraform Apply

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      data-pipeline:
        required: True
        type: string
      aws-env-dir:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      lambda-role-name:
        required: true
        type: string
      tfbackend_bucket:
        required: true
        type: string
      tfbackend_key:
        required: true
        type: string
      tfbackend_region:
        required: true
        type: string
      tfprovider_alias:
        required: true
        type: string
      tfprovider_region:
        required: true
        type: string
      deploy:
        required: true
        type: string
        default: 'false'

defaults:
  run:
    shell: bash

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.env }}
   
    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ vars.GH_RUNNER_PY_VER }}
        # python-version: '3.12'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Creds
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
        aws-region: ${{ inputs.aws-region }}
        role-session-name: enverus-session
        role-duration-seconds: 3600
        audience: sts.amazonaws.com

    - name: Install Dependencies
      run: |
        pip install jinja2==3.1.4 && pip show jinja2
        pip install PyYAML==6.0.2 && pip show PyYAML
  
    - name: Terraform Files Generation
      run: |
        cp scripts/generate-tfiles.py ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        export BUCKET=${{ inputs.tfbackend_bucket }}
        export KEY=${{ inputs.tfbackend_key }}
        export BACKEND_REGION=${{ inputs.tfbackend_region }}
        export PROVIDER_REGION=${{ inputs.tfprovider_region }}
        export ALIAS=${{ inputs.tfprovider_alias }}
        export ENV=${{ inputs.env }}
        chmod +x generate-tfiles.py
        python generate-tfiles.py
        echo && cat backend.tf
        echo && cat providers.tf

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.2

    - name: Terraform Version
      run: terraform -version
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        rm -rf .terraform*
        terraform init
  
    - name: Terraform Validate
      run: |
        cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        terraform validate

    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive
    
    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform
        skip_check: CKV_AWS_27,CKV_AWS_272,CKV_AWS_173,CKV_AWS_117,CKV_AWS_119,CKV_AWS_145,CKV2_AWS_62,CKV_AWS_144,CKV_AWS_18,CKV_AWS_116


  terraform-plan:
    name: Terraform Plan
    needs: terraform-unit-tests
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.env }}
 
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.GH_RUNNER_PY_VER }}
          # python-version: '3.12'

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
          aws-region: ${{ inputs.aws-region }}
          role-session-name: enverus-role-session
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Install Dependencies
        run: |
          pip install jinja2==3.1.4 && pip show jinja2
          pip install PyYAML==6.0.2 && pip show PyYAML
  
      - name: Terraform Files Generation
        run: |
          cp scripts/generate-tfiles.py ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          export BUCKET=${{ inputs.tfbackend_bucket }}
          export KEY=${{ inputs.tfbackend_key }}
          export BACKEND_REGION=${{ inputs.tfbackend_region }}
          export PROVIDER_REGION=${{ inputs.tfprovider_region }}
          export ALIAS=${{ inputs.tfprovider_alias }}
          export ENV=${{ inputs.env }}
          chmod +x generate-tfiles.py
          python generate-tfiles.py
          echo && cat backend.tf
          echo && cat providers.tf

      - name: Check Current IAM Role
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.2
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
     
      - name: Terraform Version
        run: terraform -version
        
      - name: Terraform Init
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          rm -rf .terraform*
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          lambda_layer_version_arn=$(aws lambda list-layer-versions \
                                          --layer-name python-libs \
                                          --query 'LayerVersions[0].LayerVersionArn' \
                                          --output text)
          terraform plan \
            -var env=${{ inputs.env }} \
            -var lambda_role_name=${{ inputs.lambda-role-name }} \
            -var python_version=${{ vars.GH_RUNNER_PY_VER }} \
            -var lambda_layer_version_arn=$lambda_layer_version_arn \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/tfplan


  terraform-apply:
    name: Terraform Apply
    if: ${{ inputs.deploy == 'true' }}
    # if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true
    needs: terraform-plan
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.env }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.GH_RUNNER_PY_VER }}
          # python-version: '3.12'

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
          aws-region: ${{ inputs.aws-region }}
          role-session-name: enverus-role-session
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Install Dependencies
        run: |
          pip install jinja2==3.1.4 && pip show jinja2
          pip install PyYAML==6.0.2 && pip show PyYAML
  
      - name: Terraform Files Generation
        run: |
          cp scripts/generate-tfiles.py ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          export BUCKET=${{ inputs.tfbackend_bucket }}
          export KEY=${{ inputs.tfbackend_key }}
          export BACKEND_REGION=${{ inputs.tfbackend_region }}
          export PROVIDER_REGION=${{ inputs.tfprovider_region }}
          export ALIAS=${{ inputs.tfprovider_alias }}
          export ENV=${{ inputs.env }}
          chmod +x generate-tfiles.py
          python generate-tfiles.py
          echo && cat backend.tf
          echo && cat providers.tf

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.2

      - name: Terraform Init
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          rm -rf .terraform*
          terraform init
      
      - name: Generate Lambda Archive Zip
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          terraform plan \
            -var env=${{ inputs.env }} \
            -var lambda_role_name=${{ inputs.lambda-role-name }} \
            -var python_version=${{ vars.GH_RUNNER_PY_VER }} \
            -var lambda_layer_version_arn=$lambda_layer_version_arn \
            -out=tfplan &> /dev/null
          tree -L 2 ../module

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
      
      - name: Terraform Apply
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          terraform apply ../../tfplan
          # TF_LOG=trace terraform apply --auto-approve ../tfplan &> log.log
          # cat log.log | grep "DEBUG: Request"
