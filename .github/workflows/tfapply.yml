name: Terraform Apply

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      data-pipeline:
        required: True
        type: string
      aws-env-dir:
        required: true
        type: string
      aws-region:
        required: true
        type: string

# Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
defaults:
  run:
    shell: bash

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.environment }}
   
    steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ vars.GH_RUNNER_PY_VER }}
        # python-version: '3.12'

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Creds
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
        aws-region: ${{ inputs.aws-region }}
        role-session-name: enverus-session
        role-duration-seconds: 3600
        audience: sts.amazonaws.com

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.2

    - name: Terraform Version
      run: terraform -version
        
    - name: Terraform Init
      run: |
        cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        rm -rf .terraform*
        terraform init
  
    - name: Terraform Validate
      run: |
        cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
        terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive
    
    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform
        # CKV_AWS_272(lambda code-signing), CKV_AWS_18(s3 bucket access logging), CKV_AWS_144(s3 cross-region replication) 
        skip_check: CKV_AWS_116,CKV_AWS_272,CKV_AWS_18,CKV_AWS_144,CKV_AWS_290,CKV_AWS_355,CKV_TF_1,CKV_AWS_117,CKV_AWS_373,CKV_AWS_27,CKV_AWS_173,CKV_AWS_119,CKV_AWS_356,CKV_AWS_111

  
  # publish-lambda-layer-version:
  #   name: Publish Lambda Layer Version
  #   needs: terraform-unit-tests
  #   # if: ${{ inputs.data-pipeline }} == 'realtime' && contains(github.event.head_commit.message, 'requirements.txt')
  #   # if: contains(github.event.head_commit.message, 'requirements.txt')
  #   runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
  #   environment: ${{ inputs.environment }}

  #   outputs:
  #     lambda_layer_job_status: ${{ job.status }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
      
  #     - name: Check if requirements.txt was changed
  #       id: check_changes
  #       run: |
  #         git fetch origin ${{ github.event.before }}  # Fetch the previous commit
  #         if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'requirements.txt'; then
  #           echo "requirements.txt has been updated!"
  #           echo "changed=true" >> $GITHUB_ENV
  #         else
  #           echo "requirements.txt has not been updated."
  #           echo "changed=false" >> $GITHUB_ENV
  #         fi

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ vars.GH_RUNNER_PY_VER }}

  #     - name: Configure AWS Creds
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
  #         aws-region: ${{ inputs.aws-region }}
  #         role-session-name: enverus-session
  #         role-duration-seconds: 3600
  #         audience: sts.amazonaws.com

  #     - name: Build lambda layer
  #       if: env.changed == 'true'
  #       run: |
  #         echo "Running commands because requirements.txt has been updated!"
  #         # Add your commands here, e.g., install dependencies, run tests, etc.
  #         # Enable manyLinux
  #         echo "#### Enable manyLinux ####"
  #         python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" || true
  #         PY_VER=$(echo "$(python --version)" | awk '{print $2}' | awk -F '.' '{print $1"."$2}') && echo $PY_VER || true
  #         echo 'manylinux1_compatible = True' > ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
  #         cat ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
  #         python -c 'import sys; sys.path.append(r"/_manylinux.py")' || true
          
  #         echo "#### Build Lambda Layer ####"
  #         # cd ${{ inputs.data-pipeline }}/module
  #         mkdir -p ./lambda-layer/python
  #         pip install -r ./lambda-layer/requirements.txt --platform=manylinux2014_x86_64 --only-binary=:all: -t ./lambda-layer/python
  #         cd ./lambda-layer
  #         zip -r ../lambda-layer.zip ./python
  #         cd ../
  #         aws sts get-caller-identity
  #         response=$(aws lambda publish-layer-version \
  #                       --layer-name python-libs \
  #                       --description "Llandman Lambda Layer for shared py libraries" \
  #                       --zip-file fileb://lambda-layer.zip \
  #                       --compatible-runtimes "python${{ vars.GH_RUNNER_PY_VER }}" \
  #                       --license-info "MIT")
  #         lambda_layer_version_arn=$(echo $response | jq -r '.LayerVersionArn')
  #         echo $lambda_layer_version_arn


  terraform-plan:
    name: Terraform Plan
    needs: terraform-unit-tests
    # needs: publish-lambda-layer-version
    # if: ${{ needs.lambda_layer_job_status.result == 'success' || needs.lambda_layer_job_status.result == 'skipped' }}
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.environment }}
 
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.GH_RUNNER_PY_VER }}
          # python-version: '3.12'

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
          aws-region: ${{ inputs.aws-region }}
          role-session-name: enverus-role-session
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Check Current IAM Role
        run: aws sts get-caller-identity

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.2
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
     
      - name: Terraform Version
        run: terraform -version
        
      - name: Terraform Init
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          rm -rf .terraform*
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          lambda_layer_version_arn=$(aws lambda list-layer-versions \
                                          --layer-name python-libs \
                                          --query 'LayerVersions[0].LayerVersionArn' \
                                          --output text)
          terraform plan \
            -var python_version=${{ vars.GH_RUNNER_PY_VER }} \
            -var lambda_layer_version_arn=$lambda_layer_version_arn \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/tfplan


  terraform-apply:
    name: Terraform Apply
    # if: github.event.pull_request.base.ref == 'main' && github.event.pull_request.merged == true
    needs: terraform-plan
    runs-on: ${{ vars.GH_RUNNER_TAG }} # use github UI to define as a repo variable
    environment: ${{ inputs.environment }}
    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.GH_RUNNER_PY_VER }}
          # python-version: '3.12'

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.IAM_ROLE_ARN_DEV }} # use github UI to define as an env variable for corresponding environment
          aws-region: ${{ inputs.aws-region }}
          role-session-name: enverus-role-session
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.2

      - name: Terraform Init
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          rm -rf .terraform*
          terraform init
      
      # - name: Enable manyLinux
      #   run: |
      #     env || true
      #     python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())" || true
      #     PY_VER=$(echo "$(python --version)" | awk '{print $2}' | awk -F '.' '{print $1"."$2}') && echo $PY_VER || true
      #     echo 'manylinux1_compatible = True' > ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
      #     cat ${Python_ROOT_DIR}/lib/python${PY_VER}/site-packages/_manylinux.py || true
      #     python -c 'import sys; sys.path.append(r"/_manylinux.py")' || true

      - name: Generate Lambda Archive Zip
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          # terraform plan -var 'python_version=${{ vars.GH_RUNNER_PY_VER }}' &> /dev/null
          terraform plan \
            -var python_version=${{ vars.GH_RUNNER_PY_VER }} \
            -var lambda_layer_version_arn=$lambda_layer_version_arn \
            -out=tfplan &> /dev/null
          tree -L 2 ../module

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
      
      - name: Terraform Apply
        run: |
          cd ${{ inputs.data-pipeline }}/${{ inputs.aws-env-dir }}/
          terraform apply ../../tfplan
          # TF_LOG=trace terraform apply --auto-approve ../tfplan &> log.log
          # cat log.log | grep "DEBUG: Request"
